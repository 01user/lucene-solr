/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// TODO: the separation of sources between tools and refGuide is awkward; it'd be
// better to separate the refGuideTools as a plain Java module and then depend on
// it as a project dependency. This would enable this module to *not* be a java module at all
// and inherit from base, adding just refGuide-related tasks.

import com.github.jrubygradle.JRubyExec

// Using 1.x versions of asciidoctor-gradle since 2.x wouldn't work
plugins {
  id 'java'
  id 'org.asciidoctor.convert' version '1.6.1'
  id 'com.github.jruby-gradle.base' version '1.4.0'
}

repositories {
  maven { url 'http://rubygems-proxy.torquebox.org/releases' }
}

configurations {
  tools
  refGuide
}

dependencies {
  gems 'rubygems:jekyll:3.5.2'
  gems 'rubygems:jekyll-asciidoc:2.1.0'
  gems 'rubygems:slim:3.0.9'

  tools gradleApi()
  tools localGroovy()
  tools ('org.asciidoctor:asciidoctor-ant')
  tools ('com.vaadin.external.google:android-json')
  tools ('org.jsoup:jsoup')
  tools ('org.apache.pdfbox:pdfbox')
  tools ('org.slf4j:jcl-over-slf4j')
  tools ('org.slf4j:slf4j-api')
  tools ('org.slf4j:slf4j-simple')
  tools ('org.apache.logging.log4j:log4j-api')
  tools ('org.apache.logging.log4j:log4j-core')
  tools ('com.google.guava:guava')
  tools ('commons-codec:commons-codec')
}

sourceSets {
   tools {
     compileClasspath += sourceSets.main.runtimeClasspath += configurations.tools
     runtimeClasspath += sourceSets.main.runtimeClasspath

     resources {
       srcDirs += file('tools')
     }
   }

   tools.java.srcDirs = ['tools']
   refGuide.java.srcDirs = ['src']
}

forbiddenApisTools {
   bundledSignatures -= 'jdk-system-out'
}

ext {
  buildContentDir = file("${buildDir}/content")
  mainPage = "index"
}

// Tasks modeled after ant file until we have a working build.

task buildInit(type: Sync) {
  // TODO: we can do cleaner than going through ant here -- we could use gradle's expand but
  // it'd require a change in the template that is backwards incompatible.
  def props = [
    // TODO: define other props. What should we do with dependency/ ivy versions?
    "solr-guide-draft-status": "foo"
  ]
  def dummyAntProject = new org.apache.tools.ant.Project()
  props.each { k, v -> dummyAntProject.setProperty(k, v) }

  // If replaceable properties change, we have to rerun.
  inputs.properties props

  from(file("src"), {
    exclude '**/*.template'
  })

  from(file("src"), {
    include '**/*.template'
    rename '(.+)\\.template', '$1'
    filteringCharset = 'UTF-8'
    filter(org.apache.tools.ant.filters.ExpandProperties, project: dummyAntProject)
  })

  into buildContentDir
}

task buildToolsJar(type: Jar) {
  dependsOn toolsClasses
  from sourceSets.tools.output
  archivesBaseName = 'solr-ref-guide-tools'
}

task buildNavDataFiles(type: JavaExec) {
  dependsOn buildInit, buildToolsJar
  classpath = sourceSets.tools.runtimeClasspath
  main = 'BuildNavAndPDFBody'
  workingDir = buildContentDir
  args([
    "${buildContentDir}",
    "${mainPage}"
  ])
}



// Define the asciidoctorj version
asciidoctorj {
  version = '1.5.0-beta.5'
}

// general Asciidoc params for HTML conversion - barebones if still needed?
asciidoctor {
  doFirst {
    println ("Starting Ref Guide build")
  }
  doLast {
    println ("Finished Ref Guide build")
  }
  logDocuments = true
  outputs.upToDateWhen { false }

  backends 'html5'
  sourceDir file('src/')
  outputDir file('../build/solr-ref-guide/')
  options doctype: 'book'

  attributes [
          /*
    safemode: 'unsafe',
    source-highlighter : 'coderay',
    'figure-caption!' : '' ,
    idprefix : '' ,
    idseparator : '-' ,
    icons : 'font' ,
    icon-set : 'fa' ,
    section-toc : ''
           */
  ]
}

// Jekyll for HTML conversion - doesn't work yet
task jekyll(type: JRubyExec) {
  dependsOn jrubyPrepare

  script 'jekyll'
  workingDir = file('src/')
  scriptArgs 'build', workingDir
}
