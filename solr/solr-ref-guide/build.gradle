/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// TODO: the separation of sources between tools and refGuide is awkward; it'd be
// better to separate the refGuideTools as a plain Java module and then depend on
// it as a project dependency. This would enable this module to *not* be a java module at all
// and inherit from base, adding just refGuide-related tasks.

import java.time.*
import java.time.format.*

// Using 1.x versions of asciidoctor-gradle since 2.x wouldn't work
plugins {
  id 'java'
  id 'org.asciidoctor.convert' version '1.6.1'
  id 'com.github.jruby-gradle.base' version '1.4.0'
}

repositories {
  maven { url 'http://rubygems-proxy.torquebox.org/releases' }
}

configurations {
  tools
  refGuide
  depVer
}

dependencies {
  gems 'rubygems:jekyll:3.5.2'
  gems 'rubygems:jekyll-asciidoc:2.1.0'
  gems 'rubygems:slim:3.0.9'

  tools gradleApi()
  tools localGroovy()
  tools ('org.asciidoctor:asciidoctor-ant')
  tools ('com.vaadin.external.google:android-json')
  tools ('org.jsoup:jsoup')
  tools ('org.apache.pdfbox:pdfbox')
  tools ('org.slf4j:jcl-over-slf4j')
  tools ('org.slf4j:slf4j-api')
  tools ('org.slf4j:slf4j-simple')
  tools ('org.apache.logging.log4j:log4j-api')
  tools ('org.apache.logging.log4j:log4j-core')
  tools ('com.google.guava:guava')
  tools ('commons-codec:commons-codec')

  depVer ('commons-codec:commons-codec')
  depVer ('io.dropwizard.metrics:metrics-core')
  depVer ('org.apache.logging.log4j:log4j-core')
  depVer ('org.apache.opennlp:opennlp-tools')
  depVer ('org.apache.tika:tika-core')
  depVer ('org.apache.velocity.tools:velocity-tools-generic')
  depVer ('org.apache.zookeeper:zookeeper')
}

sourceSets {
   tools {
     compileClasspath += sourceSets.main.runtimeClasspath += configurations.tools
     runtimeClasspath += sourceSets.main.runtimeClasspath

     resources {
       srcDirs += file('tools')
     }
   }

   tools.java.srcDirs = ['tools']
   refGuide.java.srcDirs = ['src']
}

forbiddenApisTools {
   bundledSignatures -= 'jdk-system-out'
}

ext {
  buildContentDir = file("${buildDir}/content")
  mainPage = "index"

  solrDocsVersion = "${version}".replaceAll(/^(\d+\.\d+)(|\..*)$/, "\$1")
  solrDocsVersionPath = "${solrDocsVersion}".replaceAll(/^(\d+)\.(\d+)$/, "\$1_\$2_0")

  if (!project.hasProperty("solrGuideVersion")) {
    solrGuideVersion = "${solrDocsVersion}-DRAFT"
  }

  solrGuideDraftStatus = solrGuideVersion.matches(/^\d+\.\d+(|\.\d+)$/) ? "" : "DRAFT"
  solrGuideVersionPath = solrGuideVersion.replaceAll(/^(\d+)\.(\d+)(-DRAFT)?.*/, "\$1_\$2\$3")

  javadocLink = "https://docs.oracle.com/en/java/javase/11/docs/api/"

  if (project.hasProperty("local.javadocs")) {
    htmlSolrJavadocs = "link:../../docs/"
    htmlLuceneJavadocs = "link:../../../../lucene/build/docs/"
  } else {
    htmlSolrJavadocs = "https://lucene.apache.org/solr/${solrDocsVersionPath}/"
    htmlLuceneJavadocs = "https://lucene.apache.org/core/${solrDocsVersionPath}/"
  }

  bareBonesDir = file("${buildDir}/bare-bones-html")

  def tstamp = ZonedDateTime.now()
  buildDate = DateTimeFormatter.ofPattern("yyyy-MM-dd").format(tstamp)
  buildTime = DateTimeFormatter.ofPattern("HH:mm:ss").format(tstamp)
  buildYear = DateTimeFormatter.ofPattern("yyyy").format(tstamp)

  // TODO: Compute remaining property values as they are in ant. What should we do with dependency/ ivy versions?
  props = [
    "solr-guide-draft-status": solrGuideDraftStatus,
    "solr-guide-version": solrGuideVersion,
    "solr-guide-version-path": solrGuideVersionPath,
    "solr-docs-version": solrDocsVersion,
    "javadoc.link": javadocLink,
    "java-javadocs": javadocLink,
    "solr-javadocs": htmlSolrJavadocs,
    "html-solr-javadocs": htmlSolrJavadocs,
    "lucene-javadocs": htmlLuceneJavadocs,
    "html-lucene-javadocs": htmlLuceneJavadocs,
    "build-date": buildDate,
    "DSTAMP": buildDate,
    "build-year": buildYear,
    "current.year": buildYear
  ]
}

// Tasks modeled after ant file until we have a working build.

task buildInit(type: Sync) {
  // TODO: we can do cleaner than going through ant here -- we could use gradle's expand but
  // it'd require a change in the template that is backwards incompatible.
  def dummyAntProject = new org.apache.tools.ant.Project()
  props.each { k, v -> dummyAntProject.setProperty(k, v) }

  // If replaceable properties change, we have to rerun.
  inputs.properties props

  from(file("src"), {
    exclude '**/*.template'
  })

  from(file("src"), {
    include '**/*.template'
    rename '(.+)\\.template', '$1'
    filteringCharset = 'UTF-8'
    filter(org.apache.tools.ant.filters.ExpandProperties, project: dummyAntProject)
  })

  doFirst {
    // These properties have to be resolved after configuration phase (palantir's constraint)
    // so we can't use them as input for caches.
    def propsFull = [:]
    [
      ["ivyversions./commons-codec/commons-codec", "commons-codec", "commons-codec"],
      ["ivyversions.io.dropwizard.metrics.version", "io.dropwizard.metrics", "metrics-core"],
      ["ivyversions.org.apache.logging.log4j.version", "org.apache.logging.log4j", "log4j-core"],
      ["ivyversions./org.apache.opennlp/opennlp-tools", "org.apache.opennlp", "opennlp-tools"],
      ["ivyversions.org.apache.tika.version", "org.apache.tika", "tika-core"],
      ["ivyversions.org.apache.velocity.tools.version", "org.apache.velocity.tools", "velocity-tools-generic"],
      ["ivyversions./org.apache.zookeeper/zookeeper", "org.apache.zookeeper", "zookeeper"]
    ].each { antProp, depGroup, depId ->
      propsFull[antProp] = getVersion(depGroup, depId, configurations.depVer)
    }

    propsFull.each {k, v -> dummyAntProject.setProperty(k, v) }

    // Emit info about properties for clarity.
    logger.warn("Building ref guide with:\n" + (propsFull + props).collect({k, v -> "  ${k} -> ${v}"}).join('\n'))
  }

  into buildContentDir
}

task buildToolsJar(type: Jar) {
  dependsOn toolsClasses
  from sourceSets.tools.output
  archivesBaseName = 'solr-ref-guide-tools'
}

task buildNavDataFiles(type: JavaExec) {
  dependsOn buildInit, buildToolsJar
  classpath = sourceSets.tools.runtimeClasspath
  main = 'BuildNavAndPDFBody'
  workingDir = buildContentDir
  args([
    "${buildContentDir}",
    "${mainPage}"
  ])

  doFirst {
    // Remove previously generated files first.
    [
      "pdf-main-body.adoc",
      "scrollnav.json",
      "sidebar.json"
    ].each { name ->
      project.delete(file("${buildContentDir}/_data/${name}"))
    }
  }
}

// Define the asciidoctorj version
asciidoctorj {
  version = '1.6.0-alpha.5'
}

task bareBonesAsciiDoctor(type: org.asciidoctor.gradle.AsciidoctorTask) {
  dependsOn buildNavDataFiles

  sourceDir buildContentDir
  outputDir bareBonesDir

  backends "html5"
  logDocuments false
  separateOutputDirs false

  options([
    header_footer: false,
    doctype: 'book',
    safe: 'unsafe'
  ])
  attributes([
    'attribute-missing': 'warn',
    'section-toc': '',
    'icons': 'font',
    'icon-set': 'fa',
    'pdf-stylesDir': './pdf/themes',
    'pdf-style': 'refguide',
    'pdf-fontsDir': './fonts',
    'figure-caption!': '',
    'idprefix': '',
    'idseparator': '-',
    'source-highlighter': 'coderay',

    'solr-root-path': '../../../',

     *: props
  ])

  doFirst {
    project.delete(bareBonesDir)
    bareBonesDir.mkdirs()
  }
}

task bareBonesHtmlValidation(type: JavaExec) {
  dependsOn bareBonesAsciiDoctor
  description("Builds (w/o Jekyll) a very simple html version of the guide and runs link/anchor validation on it")

  classpath = sourceSets.tools.runtimeClasspath
  main = 'CheckLinksAndAnchors'
  workingDir = buildContentDir

  args([
    "${bareBonesDir}",
    "-bare-bones"
  ])

  if (project.hasProperty("local.javadocs")) {
    args += "-check-all-relative-links"
  }
}
